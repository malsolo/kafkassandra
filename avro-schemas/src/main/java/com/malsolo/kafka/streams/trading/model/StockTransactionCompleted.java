/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.malsolo.kafka.streams.trading.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class StockTransactionCompleted extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4709540614785334330L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"StockTransactionCompleted\",\"namespace\":\"com.malsolo.kafka.streams.trading.model\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"customerId\",\"type\":[\"null\",\"string\"]},{\"name\":\"companyId\",\"type\":[\"null\",\"string\"]},{\"name\":\"sector\",\"type\":[\"null\",\"string\"]},{\"name\":\"industry\",\"type\":[\"null\",\"string\"]},{\"name\":\"transactionTimestamp\",\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"shares\",\"type\":[\"null\",\"int\"]},{\"name\":\"sharePrice\",\"type\":[\"null\",\"double\"]},{\"name\":\"completed\",\"type\":\"boolean\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<StockTransactionCompleted> ENCODER =
      new BinaryMessageEncoder<StockTransactionCompleted>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<StockTransactionCompleted> DECODER =
      new BinaryMessageDecoder<StockTransactionCompleted>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<StockTransactionCompleted> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<StockTransactionCompleted> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<StockTransactionCompleted> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<StockTransactionCompleted>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this StockTransactionCompleted to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a StockTransactionCompleted from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a StockTransactionCompleted instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static StockTransactionCompleted fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private long id;
   private java.lang.CharSequence customerId;
   private java.lang.CharSequence companyId;
   private java.lang.CharSequence sector;
   private java.lang.CharSequence industry;
   private long transactionTimestamp;
   private java.lang.Integer shares;
   private java.lang.Double sharePrice;
   private boolean completed;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public StockTransactionCompleted() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param customerId The new value for customerId
   * @param companyId The new value for companyId
   * @param sector The new value for sector
   * @param industry The new value for industry
   * @param transactionTimestamp The new value for transactionTimestamp
   * @param shares The new value for shares
   * @param sharePrice The new value for sharePrice
   * @param completed The new value for completed
   */
  public StockTransactionCompleted(java.lang.Long id, java.lang.CharSequence customerId, java.lang.CharSequence companyId, java.lang.CharSequence sector, java.lang.CharSequence industry, java.lang.Long transactionTimestamp, java.lang.Integer shares, java.lang.Double sharePrice, java.lang.Boolean completed) {
    this.id = id;
    this.customerId = customerId;
    this.companyId = companyId;
    this.sector = sector;
    this.industry = industry;
    this.transactionTimestamp = transactionTimestamp;
    this.shares = shares;
    this.sharePrice = sharePrice;
    this.completed = completed;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return customerId;
    case 2: return companyId;
    case 3: return sector;
    case 4: return industry;
    case 5: return transactionTimestamp;
    case 6: return shares;
    case 7: return sharePrice;
    case 8: return completed;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: customerId = (java.lang.CharSequence)value$; break;
    case 2: companyId = (java.lang.CharSequence)value$; break;
    case 3: sector = (java.lang.CharSequence)value$; break;
    case 4: industry = (java.lang.CharSequence)value$; break;
    case 5: transactionTimestamp = (java.lang.Long)value$; break;
    case 6: shares = (java.lang.Integer)value$; break;
    case 7: sharePrice = (java.lang.Double)value$; break;
    case 8: completed = (java.lang.Boolean)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public long getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'customerId' field.
   * @return The value of the 'customerId' field.
   */
  public java.lang.CharSequence getCustomerId() {
    return customerId;
  }


  /**
   * Sets the value of the 'customerId' field.
   * @param value the value to set.
   */
  public void setCustomerId(java.lang.CharSequence value) {
    this.customerId = value;
  }

  /**
   * Gets the value of the 'companyId' field.
   * @return The value of the 'companyId' field.
   */
  public java.lang.CharSequence getCompanyId() {
    return companyId;
  }


  /**
   * Sets the value of the 'companyId' field.
   * @param value the value to set.
   */
  public void setCompanyId(java.lang.CharSequence value) {
    this.companyId = value;
  }

  /**
   * Gets the value of the 'sector' field.
   * @return The value of the 'sector' field.
   */
  public java.lang.CharSequence getSector() {
    return sector;
  }


  /**
   * Sets the value of the 'sector' field.
   * @param value the value to set.
   */
  public void setSector(java.lang.CharSequence value) {
    this.sector = value;
  }

  /**
   * Gets the value of the 'industry' field.
   * @return The value of the 'industry' field.
   */
  public java.lang.CharSequence getIndustry() {
    return industry;
  }


  /**
   * Sets the value of the 'industry' field.
   * @param value the value to set.
   */
  public void setIndustry(java.lang.CharSequence value) {
    this.industry = value;
  }

  /**
   * Gets the value of the 'transactionTimestamp' field.
   * @return The value of the 'transactionTimestamp' field.
   */
  public long getTransactionTimestamp() {
    return transactionTimestamp;
  }


  /**
   * Sets the value of the 'transactionTimestamp' field.
   * @param value the value to set.
   */
  public void setTransactionTimestamp(long value) {
    this.transactionTimestamp = value;
  }

  /**
   * Gets the value of the 'shares' field.
   * @return The value of the 'shares' field.
   */
  public java.lang.Integer getShares() {
    return shares;
  }


  /**
   * Sets the value of the 'shares' field.
   * @param value the value to set.
   */
  public void setShares(java.lang.Integer value) {
    this.shares = value;
  }

  /**
   * Gets the value of the 'sharePrice' field.
   * @return The value of the 'sharePrice' field.
   */
  public java.lang.Double getSharePrice() {
    return sharePrice;
  }


  /**
   * Sets the value of the 'sharePrice' field.
   * @param value the value to set.
   */
  public void setSharePrice(java.lang.Double value) {
    this.sharePrice = value;
  }

  /**
   * Gets the value of the 'completed' field.
   * @return The value of the 'completed' field.
   */
  public boolean getCompleted() {
    return completed;
  }


  /**
   * Sets the value of the 'completed' field.
   * @param value the value to set.
   */
  public void setCompleted(boolean value) {
    this.completed = value;
  }

  /**
   * Creates a new StockTransactionCompleted RecordBuilder.
   * @return A new StockTransactionCompleted RecordBuilder
   */
  public static com.malsolo.kafka.streams.trading.model.StockTransactionCompleted.Builder newBuilder() {
    return new com.malsolo.kafka.streams.trading.model.StockTransactionCompleted.Builder();
  }

  /**
   * Creates a new StockTransactionCompleted RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new StockTransactionCompleted RecordBuilder
   */
  public static com.malsolo.kafka.streams.trading.model.StockTransactionCompleted.Builder newBuilder(com.malsolo.kafka.streams.trading.model.StockTransactionCompleted.Builder other) {
    if (other == null) {
      return new com.malsolo.kafka.streams.trading.model.StockTransactionCompleted.Builder();
    } else {
      return new com.malsolo.kafka.streams.trading.model.StockTransactionCompleted.Builder(other);
    }
  }

  /**
   * Creates a new StockTransactionCompleted RecordBuilder by copying an existing StockTransactionCompleted instance.
   * @param other The existing instance to copy.
   * @return A new StockTransactionCompleted RecordBuilder
   */
  public static com.malsolo.kafka.streams.trading.model.StockTransactionCompleted.Builder newBuilder(com.malsolo.kafka.streams.trading.model.StockTransactionCompleted other) {
    if (other == null) {
      return new com.malsolo.kafka.streams.trading.model.StockTransactionCompleted.Builder();
    } else {
      return new com.malsolo.kafka.streams.trading.model.StockTransactionCompleted.Builder(other);
    }
  }

  /**
   * RecordBuilder for StockTransactionCompleted instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<StockTransactionCompleted>
    implements org.apache.avro.data.RecordBuilder<StockTransactionCompleted> {

    private long id;
    private java.lang.CharSequence customerId;
    private java.lang.CharSequence companyId;
    private java.lang.CharSequence sector;
    private java.lang.CharSequence industry;
    private long transactionTimestamp;
    private java.lang.Integer shares;
    private java.lang.Double sharePrice;
    private boolean completed;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.malsolo.kafka.streams.trading.model.StockTransactionCompleted.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.customerId)) {
        this.customerId = data().deepCopy(fields()[1].schema(), other.customerId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.companyId)) {
        this.companyId = data().deepCopy(fields()[2].schema(), other.companyId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.sector)) {
        this.sector = data().deepCopy(fields()[3].schema(), other.sector);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.industry)) {
        this.industry = data().deepCopy(fields()[4].schema(), other.industry);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.transactionTimestamp)) {
        this.transactionTimestamp = data().deepCopy(fields()[5].schema(), other.transactionTimestamp);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.shares)) {
        this.shares = data().deepCopy(fields()[6].schema(), other.shares);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.sharePrice)) {
        this.sharePrice = data().deepCopy(fields()[7].schema(), other.sharePrice);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.completed)) {
        this.completed = data().deepCopy(fields()[8].schema(), other.completed);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
    }

    /**
     * Creates a Builder by copying an existing StockTransactionCompleted instance
     * @param other The existing instance to copy.
     */
    private Builder(com.malsolo.kafka.streams.trading.model.StockTransactionCompleted other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.customerId)) {
        this.customerId = data().deepCopy(fields()[1].schema(), other.customerId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.companyId)) {
        this.companyId = data().deepCopy(fields()[2].schema(), other.companyId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.sector)) {
        this.sector = data().deepCopy(fields()[3].schema(), other.sector);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.industry)) {
        this.industry = data().deepCopy(fields()[4].schema(), other.industry);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.transactionTimestamp)) {
        this.transactionTimestamp = data().deepCopy(fields()[5].schema(), other.transactionTimestamp);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.shares)) {
        this.shares = data().deepCopy(fields()[6].schema(), other.shares);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.sharePrice)) {
        this.sharePrice = data().deepCopy(fields()[7].schema(), other.sharePrice);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.completed)) {
        this.completed = data().deepCopy(fields()[8].schema(), other.completed);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.malsolo.kafka.streams.trading.model.StockTransactionCompleted.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.malsolo.kafka.streams.trading.model.StockTransactionCompleted.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'customerId' field.
      * @return The value.
      */
    public java.lang.CharSequence getCustomerId() {
      return customerId;
    }


    /**
      * Sets the value of the 'customerId' field.
      * @param value The value of 'customerId'.
      * @return This builder.
      */
    public com.malsolo.kafka.streams.trading.model.StockTransactionCompleted.Builder setCustomerId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.customerId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'customerId' field has been set.
      * @return True if the 'customerId' field has been set, false otherwise.
      */
    public boolean hasCustomerId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'customerId' field.
      * @return This builder.
      */
    public com.malsolo.kafka.streams.trading.model.StockTransactionCompleted.Builder clearCustomerId() {
      customerId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'companyId' field.
      * @return The value.
      */
    public java.lang.CharSequence getCompanyId() {
      return companyId;
    }


    /**
      * Sets the value of the 'companyId' field.
      * @param value The value of 'companyId'.
      * @return This builder.
      */
    public com.malsolo.kafka.streams.trading.model.StockTransactionCompleted.Builder setCompanyId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.companyId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'companyId' field has been set.
      * @return True if the 'companyId' field has been set, false otherwise.
      */
    public boolean hasCompanyId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'companyId' field.
      * @return This builder.
      */
    public com.malsolo.kafka.streams.trading.model.StockTransactionCompleted.Builder clearCompanyId() {
      companyId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'sector' field.
      * @return The value.
      */
    public java.lang.CharSequence getSector() {
      return sector;
    }


    /**
      * Sets the value of the 'sector' field.
      * @param value The value of 'sector'.
      * @return This builder.
      */
    public com.malsolo.kafka.streams.trading.model.StockTransactionCompleted.Builder setSector(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.sector = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'sector' field has been set.
      * @return True if the 'sector' field has been set, false otherwise.
      */
    public boolean hasSector() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'sector' field.
      * @return This builder.
      */
    public com.malsolo.kafka.streams.trading.model.StockTransactionCompleted.Builder clearSector() {
      sector = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'industry' field.
      * @return The value.
      */
    public java.lang.CharSequence getIndustry() {
      return industry;
    }


    /**
      * Sets the value of the 'industry' field.
      * @param value The value of 'industry'.
      * @return This builder.
      */
    public com.malsolo.kafka.streams.trading.model.StockTransactionCompleted.Builder setIndustry(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.industry = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'industry' field has been set.
      * @return True if the 'industry' field has been set, false otherwise.
      */
    public boolean hasIndustry() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'industry' field.
      * @return This builder.
      */
    public com.malsolo.kafka.streams.trading.model.StockTransactionCompleted.Builder clearIndustry() {
      industry = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionTimestamp' field.
      * @return The value.
      */
    public long getTransactionTimestamp() {
      return transactionTimestamp;
    }


    /**
      * Sets the value of the 'transactionTimestamp' field.
      * @param value The value of 'transactionTimestamp'.
      * @return This builder.
      */
    public com.malsolo.kafka.streams.trading.model.StockTransactionCompleted.Builder setTransactionTimestamp(long value) {
      validate(fields()[5], value);
      this.transactionTimestamp = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionTimestamp' field has been set.
      * @return True if the 'transactionTimestamp' field has been set, false otherwise.
      */
    public boolean hasTransactionTimestamp() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'transactionTimestamp' field.
      * @return This builder.
      */
    public com.malsolo.kafka.streams.trading.model.StockTransactionCompleted.Builder clearTransactionTimestamp() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'shares' field.
      * @return The value.
      */
    public java.lang.Integer getShares() {
      return shares;
    }


    /**
      * Sets the value of the 'shares' field.
      * @param value The value of 'shares'.
      * @return This builder.
      */
    public com.malsolo.kafka.streams.trading.model.StockTransactionCompleted.Builder setShares(java.lang.Integer value) {
      validate(fields()[6], value);
      this.shares = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'shares' field has been set.
      * @return True if the 'shares' field has been set, false otherwise.
      */
    public boolean hasShares() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'shares' field.
      * @return This builder.
      */
    public com.malsolo.kafka.streams.trading.model.StockTransactionCompleted.Builder clearShares() {
      shares = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'sharePrice' field.
      * @return The value.
      */
    public java.lang.Double getSharePrice() {
      return sharePrice;
    }


    /**
      * Sets the value of the 'sharePrice' field.
      * @param value The value of 'sharePrice'.
      * @return This builder.
      */
    public com.malsolo.kafka.streams.trading.model.StockTransactionCompleted.Builder setSharePrice(java.lang.Double value) {
      validate(fields()[7], value);
      this.sharePrice = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'sharePrice' field has been set.
      * @return True if the 'sharePrice' field has been set, false otherwise.
      */
    public boolean hasSharePrice() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'sharePrice' field.
      * @return This builder.
      */
    public com.malsolo.kafka.streams.trading.model.StockTransactionCompleted.Builder clearSharePrice() {
      sharePrice = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'completed' field.
      * @return The value.
      */
    public boolean getCompleted() {
      return completed;
    }


    /**
      * Sets the value of the 'completed' field.
      * @param value The value of 'completed'.
      * @return This builder.
      */
    public com.malsolo.kafka.streams.trading.model.StockTransactionCompleted.Builder setCompleted(boolean value) {
      validate(fields()[8], value);
      this.completed = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'completed' field has been set.
      * @return True if the 'completed' field has been set, false otherwise.
      */
    public boolean hasCompleted() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'completed' field.
      * @return This builder.
      */
    public com.malsolo.kafka.streams.trading.model.StockTransactionCompleted.Builder clearCompleted() {
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public StockTransactionCompleted build() {
      try {
        StockTransactionCompleted record = new StockTransactionCompleted();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.customerId = fieldSetFlags()[1] ? this.customerId : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.companyId = fieldSetFlags()[2] ? this.companyId : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.sector = fieldSetFlags()[3] ? this.sector : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.industry = fieldSetFlags()[4] ? this.industry : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.transactionTimestamp = fieldSetFlags()[5] ? this.transactionTimestamp : (java.lang.Long) defaultValue(fields()[5]);
        record.shares = fieldSetFlags()[6] ? this.shares : (java.lang.Integer) defaultValue(fields()[6]);
        record.sharePrice = fieldSetFlags()[7] ? this.sharePrice : (java.lang.Double) defaultValue(fields()[7]);
        record.completed = fieldSetFlags()[8] ? this.completed : (java.lang.Boolean) defaultValue(fields()[8]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<StockTransactionCompleted>
    WRITER$ = (org.apache.avro.io.DatumWriter<StockTransactionCompleted>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<StockTransactionCompleted>
    READER$ = (org.apache.avro.io.DatumReader<StockTransactionCompleted>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.id);

    if (this.customerId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.customerId);
    }

    if (this.companyId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.companyId);
    }

    if (this.sector == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.sector);
    }

    if (this.industry == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.industry);
    }

    out.writeLong(this.transactionTimestamp);

    if (this.shares == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.shares);
    }

    if (this.sharePrice == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.sharePrice);
    }

    out.writeBoolean(this.completed);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readLong();

      if (in.readIndex() != 1) {
        in.readNull();
        this.customerId = null;
      } else {
        this.customerId = in.readString(this.customerId instanceof Utf8 ? (Utf8)this.customerId : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.companyId = null;
      } else {
        this.companyId = in.readString(this.companyId instanceof Utf8 ? (Utf8)this.companyId : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.sector = null;
      } else {
        this.sector = in.readString(this.sector instanceof Utf8 ? (Utf8)this.sector : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.industry = null;
      } else {
        this.industry = in.readString(this.industry instanceof Utf8 ? (Utf8)this.industry : null);
      }

      this.transactionTimestamp = in.readLong();

      if (in.readIndex() != 1) {
        in.readNull();
        this.shares = null;
      } else {
        this.shares = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.sharePrice = null;
      } else {
        this.sharePrice = in.readDouble();
      }

      this.completed = in.readBoolean();

    } else {
      for (int i = 0; i < 9; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readLong();
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.customerId = null;
          } else {
            this.customerId = in.readString(this.customerId instanceof Utf8 ? (Utf8)this.customerId : null);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.companyId = null;
          } else {
            this.companyId = in.readString(this.companyId instanceof Utf8 ? (Utf8)this.companyId : null);
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.sector = null;
          } else {
            this.sector = in.readString(this.sector instanceof Utf8 ? (Utf8)this.sector : null);
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.industry = null;
          } else {
            this.industry = in.readString(this.industry instanceof Utf8 ? (Utf8)this.industry : null);
          }
          break;

        case 5:
          this.transactionTimestamp = in.readLong();
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.shares = null;
          } else {
            this.shares = in.readInt();
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.sharePrice = null;
          } else {
            this.sharePrice = in.readDouble();
          }
          break;

        case 8:
          this.completed = in.readBoolean();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










